{"version":3,"sources":["cat.svg","App.js","serviceWorker.js","index.js"],"names":["module","exports","App","document","title","loadedUndone","localStorage","getItem","loadedDone","split","useEffect","saveInLocalStorage","useState","undoneTasks","setNewUndoneTask","newTask","setNewTask","doneTasks","setDoneTask","setItem","addTask","replace","length","concat","sort","alert","className","id","type","value","onChange","e","target","placeholder","onKeyPress","event","key","onClick","aria-hidden","text-center","src","catIcon","map","task","index","arrTemp","splice","completeTask","window","confirm","deleteUndone","markAsUndone","deleteDone","Boolean","location","hostname","match","ReactDOM","render","StrictMode","href","rel","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.6769cf4a.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.713d7b95.svg\";","import React, { useState, useEffect } from 'react';\nimport './App.css';\nimport catIcon from './cat.svg';\n\n\nfunction App() {\n  /**\n   * Exercise SDev\n   * Company: Beliveo\n   * Candidate: Lizzie Marielle Guajardo Mozo\n   * 27 April 2020\n   \n   * Acceptance Criterias:\n    •\tHaving started the application, I want to see two clearly divided sections: to do and done list, and an area to create a new task. \n    •\tHaving started the application, when I see the list of tasks, if there's no task, I want to see a clear affordance telling me that the list is empty.\n    •\tHaving started the application, when I see the list of tasks, it should be organized in this fashion: On the top, the to-do tasks and on the bottom, the done tasks.\n    •\tHaving started the application and loaded a list of tasks divided on To-do and Done sub-lists, I want each sub-list to be ordered alphabetically.\n    •\tHaving started the application and loaded a list of tasks and having at least one to-do item on the list, I want it to have a CTA for each to-do item to mark it as done.\n    •\tHaving started the application and loaded a list of tasks and having at least one to-do item on the list, when I click on the CTA of any to-do task, I want to see how the tasks moves from the to-do to the done list.\n    •\tHaving started the application, when I fill up the form to create a new task and \"save\" the new task, I want to see how this new task is added on the list of to-do tasks.\n    •\tHaving started the application, when I fill up the form to create a new task and \"save\" the new task, I want the form to be cleaned up.\n    •\tHaving started the application, when I hit the refresh (F5) button, I want the lists of to-do and done tasks to be kept in memory.\n    Definition of Done:\n    •\tApplication built on a Git repo.\n    •\tApplication created using the last stable react version.\n    •\tApplication should use react hooks to manage the state.\n    •\tCode properly formatted in order to improve its readability.\n    •\tApplication state saved on local storage.\n    •\tUse of Bootstrap components for the visual appearance.\n   */\n\n  document.title = \"To Do List\";\n\n  //Variables that store in Local Storage the task in the \"To Do\" list and in the \"Done\" list respectivelly\n  var  loadedUndone = localStorage.getItem(\"todo\")  \n  var  loadedDone = localStorage.getItem(\"done\")\n\n  //If localStorage is Empty, initialize the variables as empty array, if not, copy the content of local storage\n  if(!loadedUndone){\n      loadedUndone = []\n  }\n  else{\n    loadedUndone = loadedUndone.split(\",\");\n  }\n  if(!loadedDone){\n    loadedDone = []\n  }\n  else{\n    loadedDone = loadedDone.split(\",\");\n  }\n\n  //Hook to saveInLocalStorage\n  useEffect(()=> {\n    saveInLocalStorage();\n  })\n\n  ////States Definition\n  //unDoneTasks stores an array of task that appear at the \"To Do\" Section\n  const [undoneTasks,setNewUndoneTask] = useState(loadedUndone);  \n  //newTask stores the string present at the input \"Add New Task\"\n  const [newTask,setNewTask] = useState(\"\");\n  //doneTasks stores an array of tasks that appear at the \"Done\" Section\n  const [doneTasks,setDoneTask] = useState(loadedDone);\n\n  //Function stores \"ToDo\" tasks and \"Done\" tasks in localStorage in order to retrieve them when refreshing the page\n  function saveInLocalStorage(){\n    localStorage.setItem(\"todo\",undoneTasks);\n    localStorage.setItem(\"done\",doneTasks);\n  }\n\n  //Function that deletes a task from the \"Done\" Section, receives an index with the position of the task to delete\n  function deleteDone(index){\n    //Confirmation prompt\n    if(window.confirm(\"Are you sure you want to delete this task? '\"+doneTasks[index] +\"'. This action cannot be reversed\"))\n    {\n      //Temporal array that copies currently in \"Done\" section\n      var arrTemp = doneTasks;\n      arrTemp.splice(index,1);\n      //rewrites doneTasks without the deleted item\n      setDoneTask(arrTemp); \n      //Adds a blank space to input bar for new Task because a change is needed in order for the delete to appear\n      setNewTask(newTask+\" \");\n    }    \n  }\n\n  //Function that deletes a task from the \"ToDo\" Section, receives an index with the position of the task to delete  \n  function deleteUndone(index){\n    if(window.confirm(\"Are you sure you want to delete this task? '\"+undoneTasks[index] +\"'. This action cannot be reversed\"))\n    {\n      //Temporal array that copies currently in \"ToDo\" section\n      var arrTemp = undoneTasks;\n      arrTemp.splice(index,1);\n      //rewrites undoneTasks without the deleted item\n      setNewUndoneTask(arrTemp);\n      //Adds a blank space to input bar for new Task because a change is needed in order for the delete to appear\n      setNewTask(newTask+\" \");\n    }\n  }\n\n  //Function that is called when a task in checked in the \"To Do\" Section, making it go to \"Done\" Section, receives index of task to move \n  function completeTask(index){    \n    //Adds element to the \"done\" section and sorts the array alphabetically\n    setDoneTask(doneTasks.concat([undoneTasks[index]]).sort());\n    //Temporal array that copies currently in \"ToDo\" section\n    var arrTemp = undoneTasks;\n    arrTemp.splice(index,1);\n    //Replaces list of undone tasks without the element that was moved\n    setNewUndoneTask(arrTemp); \n    //Updates local storage\n    saveInLocalStorage();\n  };\n\n  //Function that is called when a task in unchecked in the \"Done\" Section, making it go to \"ToDo\" Section, receives index of task to move \n  function markAsUndone(index){\n    //Adds element to the \"todo\" section and sorts the array alphabetically\n    setNewUndoneTask(undoneTasks.concat([doneTasks[index]]).sort());\n    //Temporal array that copies currently in \"done\" section\n    var arrTemp = doneTasks;\n    arrTemp.splice(index,1);\n    //Replaces list of done tasks without the element that was moved\n    setDoneTask(arrTemp);\n    //Updates local storage\n    saveInLocalStorage();\n  };\n\n  //Functions that adds new task to \"ToDo\" section\n  function addTask(){\n    //if the task wirtten at input bar is not empty \n    if(newTask.replace(/\\s/g, '').length)\n    {\n      //Concat element to undoneTasks, order alphabetically and remove white spaces from the beggining if they exist\n      setNewUndoneTask(undoneTasks.concat([newTask.replace(/^\\s+/g, '')]).sort());      \n      //Update local storage\n      saveInLocalStorage();\n    }\n    else{\n      alert(\"New Task cannot be empty space\")\n    }\n    //Empty input bar\n    setNewTask(\"\");\n    \n  };\n  \n  return (    \n    <div className = \"body \">\n      <div className=\"container\">\n        <row>\n          {/* Input bar to add new task */}\n          <div className=\"col-12\">\n            <div className=\"card\" id=\"new\">   \n              <div className=\"input-group text-center\">\n                <input id=\"newitem\" type=\"text\" className=\"form-control\" value={newTask} onChange={e => setNewTask(e.target.value)} placeholder=\"Add a new Task\" onKeyPress={event => {if(event.key == \"Enter\"){addTask()}}}/>\n                <div className=\"input-group-append\">\n                  <button className=\"btn btn-primary\" type=\"submit\" onClick={addTask}>\n                    <i className=\"material-icons align-middle\" aria-hidden=\"true\" >add_circle_outline</i>\n                  </button>\n                </div>\n              </div>\n            </div>\n          </div>\n\n          {/* To-Do Section */}\n          <div className=\"col-12\">\n            <div className=\"card\" id=\"todo\">\n              <h5 className=\"card-header text-center\">To-Do tasks</h5>\n              <div className=\"card-body\">                \n                {/* If there are no tasks to show, show message */\n                undoneTasks.length===0 ? \n                <div text-center>\n                  <h4 className=\"text-center\">You Have no Tasks Left!</h4>\n                  <p className=\"text-center\">Play a videogame, take a nap or add a new task</p>\n                  <div className=\"text-center\">\n                    <img src={catIcon}  className=\"asset text-center\"/>\n                  </div>\n                </div>\n                :/* If there are are tasks, display each one */          \n                undoneTasks.map(\n                    (task,index) => (\n                      <div className=\"input-group\">\n                        {/* Check Box icon */}\n                        <div className=\"task-row\">\n                          <div className=\"input-group-append\">\n                            <i className=\"check material-icons align-middle icon-blue\" onClick={()=> {completeTask(index)}}> check_box_outline_blank </i>\n                          </div>\n                        </div>\n                        {/* Task Text */}\n                        <div className=\"col-10 task-row\">\n                          <label className=\"form-check-label\">\n                            {task}\n                          </label> \n                        </div>\n                        {/* Trash icon to delete */}\n                        <div className=\"input-group-append\">\n                          <i className=\"trash material-icons align-middle\" onClick={()=> {deleteUndone(index)}}> delete </i>\n                        </div>\n                      </div>                      \n                    )\n                  )\n                }               \n              </div>\n            </div>\n          </div>\n          \n           {/* Done Section */}\n          <div className=\"col-12\">\n            <div className=\"card\" id=\"done\">\n              <h5 className=\"card-header text-center\">Done tasks</h5>\n              <div className=\"card-body\">\n              {/* If there are no tasks to show, show message */\n              doneTasks.length===0 ? \n                <div text-center>\n                  <h4 className=\"text-center\">You Haven't completed any task</h4>\n                  <p className=\"text-center\">Not very impressive</p>\n                </div>\n                : /* If there are tasks, display each one */          \n                doneTasks.map(\n                      (task,index) => (\n                        <div className=\"input-group\">\n                           {/* Check Box icon */}\n                          <div className=\"task-row\">\n                            <div className=\"input-group-append\">\n                              <i className=\"check material-icons align-middle icon-blue\" onClick={()=> {markAsUndone(index)}}> check_box </i>\n                            </div>\n                          </div>\n                          {/* Task Text */}\n                          <div className=\" col-10 task-row\">\n                            <label className=\"form-check-label done\">\n                              {task}\n                            </label> \n                          </div>  \n                          {/* Trash icon to delete */}\n                          <div className=\"input-group-append\">\n                            <i className=\"trash material-icons align-middle\" onClick={()=> {deleteDone(index)}}> delete </i>\n                          </div>\n                        </div>     \n                      )\n                    )\n                }                     \n              </div>\n            </div>\n          </div>\n\n        </row>  \n      </div>    \n    </div>\n\n\n        \n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <link href=\"https://fonts.googleapis.com/icon?family=Material+Icons\" rel=\"stylesheet\"></link>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}